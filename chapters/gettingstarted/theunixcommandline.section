{{NL2BR}}
All of the computers in the CSE labs run on GNU/Linux systems. As such, it is crucial to get to know these systems in your own time, preferably on your own computer. The following steps outline your choices on running your own GNU/Linux distribution.

<h2>If you are a Windows user:</h2>
Although you can do the course in Windows, it will be to your extreme advantage to learn to use a Linux system. Unfortunately, Visual Studio on Windows may not always compile all the code we write (POSIX C), so the only options you have are:

{{NONL2BR}}
<ul>
<li>Write your code in a text editor in Windows, such as Notepad, and compile/run it using Cygwin. <strong>NOT RECOMMENDED</strong> because you won't learn nearly as much for the amount of work required.</li>
<li>Use only the CSE lab computers for all your work. <strong>NOT RECOMMENDED</strong>, who wants to spend their whole day in CSE lab?</li>
<li>Run a Linux distribution, likely Ubuntu, inside a virtual machine in Windows.<br/>This is far simpler than the next option, but not recommended for CSE students. Students of COMP1917 who are not Computer Science/Computer Engineering/Software Engineering students are suggested to do this.</li>
<li>Dual-boot a Linux distribution, preferably Ubuntu. This means basically having both Windows and Linux on the same machine.<br/>This is highly recommended for CSE students as you will eventually grow tired of using a virtual machine and will need to learn to do this sooner or later. Why not do it sooner? ;) You can also receive help doing this from the good folks at <a href='http://csesoc.unsw.edu.au'>CSESoc</a>!</li>
<li>Go hardcore. Expunge the evil that is Windows from your hard-drive entirely and install a pristine distribution of Linux. Not recommended if you don't know what you're doing.</li>
</ul>
{{NL2BR}}

As these options are slightly outside of the scope of this course for the moment, we will leave it up to you to figure these out. We will post an update with instructions later.

<h2>If you are a Mac OSX user:</h2>
CMD+SPACE to open spotlight.
Type &quot;terminal&quot; into the search field.
Click on Terminal (the black box icon).

You will be using this A LOT!
NOTE: Even if you use a mac, don't disregard the notes for GNU/Linux as this is the operating system that you will use on the CSE lab computers.

<h2>If you are a Linux user:</h2>
Congratulations on using a civilised operating system! Have a cookie.

<h2>Other notes</h2>
Arguments in the context of the command line refer to text entered after the name of a command/script/binary.

The UNIX command line and the C programming language are all CASE SENSITIVE so 'A' and 'a' are considered to be completely different.

To run a command, type it at the prompt and press ENTER/RETURN.

To run a script/binary, type ./FILENAME at the prompt and press ENTER or PATHTOFILE/FILENAME and press ENTER.

After running a command, press the up arrow key to have the text for that command copied to the current prompt. You can use this key to view and run previously used commands.

The <strong>~</strong> character is an alias for your home directory.
e.g.
~/Documents refers to the directory /home/name/Documents or /Users/Name/Documents
Similarly, the &quot;.&quot; character refers to the current or &quot;working&quot; directory and &quot;..&quot; refers to the parent directory (the directory that which contains the working directory).

Here are some useful commands:
pwd &#45; print working directory. Displays the full path to the current directory.
ls &#45; list all files and directories in current directory
cd DIRECTORY &#45; changes the working directory to DIRECTORY. With no arguments, you are taken to you home directory
mkdir NAME &#45; creates a new directory of name NAME in the working directory

An example command line:
<pre class="code">
steve$ pwd
/home/steve                   current directory
steve$ ls
Desktop                       contents of directry
Documents
Music
Videos
steve$ cd Documents           change to ~/Documents directory
steve$ pwd
/home/steve/Documents
steve$ mkdir programs         make a directory named programs
steve$ cd programs
steve$ ls
steve$ cd ..                  go back to ~/Documents
steve$ ls
helloworld.c                  there is now a programs directory
programs
test.c
test
steve$ ls *.c                 * can be used as a wild card
helloworld.c
test.c
</pre>

Don't worry, it comes with practice.
If you need help or want more info on a command, type &quot;man COMMAND&quot; at the prompt (e.g. steve$ man ls) and you will be taken to the man page for that command (in the terminal). Press &quot;q&quot; to exit the  man page.

<h2>Some more tips:</h2>
Ctrl+C kills the current command. Use it to exit your programs if stuck in an infinite loop or taking too long to run. NEVER use it to exit your programs under normal conditions.

Ctrl+D enters the end of file (EOF) character. It is a more elegant way of closing your programs, and closes the terminal if entered at the prompt.

Ctrl+Z should NOT be used to close your programs. This is because it doesn't actually close them, just puts them in the background so you can't see them any more. You should never use this for command line only programs.

Generally, to close a terminal in GNU/Linux, press Ctrl+D or use the &quot;exit&quot; command.
To close a terminal in Mac OSX, press Cmd+Q.

<h2>TAB Complete</h2>
So important it has its own section. All commands and paths to files can be completed automatically by hitting the TAB key. This will save time and effort so use it when you can. Commands and paths are completed up to the point where they fit all valid command line entries.

E.g.
<pre class="code">steve$ pwd
/home/steve
steve$ ls
Documents
Desktop
Music
steve$ cd D
&lt;press tab&gt;
steve$ cd D        it will remain D as D could be the start of Desktop or Documents
steve$ cd Do
&lt;press tab&gt;
steve$ cd Documents
</pre>
Note that the command will not actually run until you press ENTER.
