{{NL2BR}}
<h2>gcc</h2>
gcc (the GNU C Compiler) is what we will be using to compile our code. 

<strong>Linux users should already have it.</strong> 
[[steve$ which gcc
/usr/bin/gcc
]]
Means it is installed. But:
[[steve$ which gcc
gcc not found
steve$ sudo apt-get install gcc
... installs gcc ...
]]
Note that the apt-get command only works in Ubuntu (and perhaps some other Linux distributions).

Mac users will need to install X Code which is available from the Apple website. Once X Code is installed, gcc can be run from the command line.

There are some options that should be used when compiling your C code with gcc.
Options follow the command on the command line and are usually prefixed with a '-'. 

When compiling code with gcc for COMP1917, your command line should look like this:
[[steve$ gcc -Wall -Werror -O -o myprogram myprogram.c
]]
gcc: the GNU C Compiler
-Wall: show all warnings
-Werror: all warnings are treated as errors
-O: automatically optimises your code to improve performance
-o myprogram: produce a binary program named &quot;myprogram&quot;
myprogram.c: the file containing the c code (source code) for the program.

A <strong>warning</strong> is when the compiler finds something unusual in your code, but it is still capable of being compiled.

An <strong>error</strong> is when the compiler finds a mistake in your code which means that it cannot be compiled.

<h2>Why do we treat all warnings as errors?</h2>
Even though warnings don't mean your code is broken, when a warning is invoked it is likely that your code doesn't mean exactly what you think it means. 

Maybe you forgot something, maybe you used valid C syntax in an inappropriate way.

Treating warnings as errors means that your code will not compile with warnings, so you have to deal with any problems early, leaving your code easier to debug.
