</div><div class='section warning packed'><strong>WARNING!</strong>
This section contains <strong>awesome explosions</strong>. Proceed at your own risk.</div><div class="section">
Now that you have a Linux distribution installed (or are running Mac OSX), we can get started with the command line.

<strong>Depending on your Linux distribution</strong>, you will need to find how to open the terminal application. Look through the menus, google it, and so on until you find it.

An example for an older version of Ubuntu might be to begin by clicking on System -> Preferences -> Keyboard Shortcuts. Add a shortcut for "Terminal", something like Alt-T is recommended. You should now be able to open the terminal (a black rectangle) by pressing this shortcut. If not, you can still open the Terminal by clicking on Applications -> Accessories -> Terminal.

Once you know how to open the terminal, do so. You will be greeted by a black rectangle with text like this:
[[steve$
]]
Isn't that phenomenally exciting?
As bland as this may look, most of your work for COMP1917 will be done in this black box. 

<h2>What is the point?</h2>
The terminal is basically a simple way of interacting with your computer. It gets rid of all the useless clutter on the screen and presents you with only the information you need precisely when you ask for it. What can you do in the terminal? Practically everything!

<h2>Using the terminal</h2>
Before we begin, notice the blinking white block. This is your "prompt", that is, where you type in commands. Try the command shown below (write the text after steve$)
[[steve$ pwd
/home/steve]]
This is the directory you are currently in, also known as your "working" directory. In fact, "pwd" stands for "print working directory". A directory is the Linux nerd's name for a folder.

Below are the files and directories currently inside your working directory. "ls" stands for "list".
[[steve$ ls
Desktop
Documents
Music]]
You can move to different directories. This moves you into the Documents directory, so now you are at /home/yourusername/Documents, or ~/Documents in shorthand.
[[steve$ cd Documents
steve$ pwd
/home/steve/Documents
steve$ ls
assignment.txt]]
/home/yourusername is your home diretory. If you're lazy, you can type <strong>~</strong> instead, so that ~ is your home diretory and ~dan is dan's home diretory.
[[steve$ cd ~dan
steve$ pwd
/home/dan
steve$ cd ~
steve$ pwd
/home/steve]]
You can create directories! Here, we create a directory called "comp1917". "mkdir" stands for "make directory".
[[steve$ cd Documents
steve$ mkdir comp1917
steve$ ls
assignment.txt
comp1917]]
You can also move up the directory structure.
[[steve$ cd comp1917
steve$ pwd
/home/steve/Documents/comp1917
steve$ cd ..
steve$ pwd
/home/steve/Documents]]
In this example we moved around in different directories. Make sure you remember the following shorthand symbols:
<strong>~</strong> means /home/yourusername
<strong>..</strong> means the parent directory of the current (working) directory
<strong>.</strong> means the current (working) directory

Some commands we learned from the examples above are:
<strong>ls</strong> - list the files and directories in the working directory
<strong>pwd</strong> - print the working directory. Effectively, "where am I?"
<strong>cd directory</strong> - go into "directory", i.e. change the working directory

ls, pwd, cd are all examples of commands. The terminal recognises that we want to run a specific program, for example, the "pwd" program, and finds it in its program library.

Linux files and directories are <strong>case-sensitive</strong>. So, "ls" is <em>not</em> the same as "LS" and "Documents" is not the same as "documents".

If you want to run the last command you typed again, simply press the up arrow key on your keyboard. This will copy the last command you executed into the prompt. Press up again and it will copy the second last command, and so on.

<em>Don't worry, you'll remember all of this with practice.</em>

<h2>Man up!</h2>
If you need to know what a given command does, simply run the command "man" with an argument of your command. The "man" command runs the "man" program, short for "<strong>man</strong>ual". Go ahead and run it now:
[[steve$ man
What manual page do you want?]]
An "<strong>argument</strong>" is something you give to the command, a form of input. In the terminal, you can give arguments to commands by simply typing them after the command name.

For example, when you use the "cd" command, you have to specify a directory for it to change into. The directory you specify is the "argument" you pass into the command "cd".

Depending on the command/program you run, it may or many not accept, expect, or even rely on arguments. In order to know what arguments it accepts, you should consult its <strong>man</strong>ual page. The "man" command takes one argument: the page you want to read.[[Actually, it takes many, many more arguments, but none that you will need to use for quite some time yet.]]

So, in a similar sense, if you want to know what "cd" does, you can pass "cd" as an argument into the "man" command, like so:
[[steve$ man cd
... lots of text in here ...]]
Press the up and down arrow keys to read the manual, or "q" to exit out of the manual.

<h2>Some more tips:</h2>
Ctrl+C kills the current command. Use it to exit your programs if you are ever stuck in an infinite loop or taking too long to run.

Ctrl+D enters the end of file (EOF) character. It is a more elegant way of closing some programs, and closes the terminal if entered at the prompt. You will learn more about this later, especially during the <strong>Input</strong> chapter.

To close a terminal in Mac OSX, press Cmd+W.

<h2>TAB Completion</h2>
Tab completion is an extremely useful feature in command lines which helps you be even lazier. By now, you should be seeing a pattern emerge of computer scientists' heavy reliance on laziness.

Tab completion essentially completes a command you have half-typed out so you don't have to waste precious milliseconds writing the rest of it. It is literally magical.

For example, let's say we have a directory called "antidisestablishmentarianism". Don't ask why someone would name a directory like that, that's above your pay grade, code monkey! 

Now let's say we want to go to that directory.

Rather than typing this:
[[steve$ cd antidisestablishmen screw this
cd:cd:10: too many arguments]]
We can instead do this:
[[steve$ cd an[TAB KEY][ENTER]
steve$ pwd
/home/steve/antidisestablishmentarianism]]
Holy fucking shit.

{{img/explosion.png|Look quickly! It's Michael Bay!}}

But wait, what would happen if we had two directories, and one of them was called "antidisestablishmentawesome"?
[[steve$ ls
antidisestablishmentawesome
antidisestablishmentarianism
steve$ cd an[TAB KEY]
steve$ cd antidisestablishmenta]]
Oh noes! It didn't complete the whole directory name and now we have wasted precious milliseconds of our lives that we'll never get back!

Since we have two directories that both start with "an", the tab completion decided to fill in the rest of what you were typing, which was almost surely "antidisestablishmenta", but then there are two choices and so it left us to complete the rest.[[Note that this sort of behaviour, while default in some terminals, is not guaranteed to always be this way. Play around with tab completion in your terminal to see what it can and, most importantly, can't do for you.]]

All you have to do now therefore is show the terminal which one you want by adding an extra character to differentiate between them. That is, if you add a "w":
[[steve$ cd antidisestablishmentaw[TAB KEY]
steve$ pwd 
/home/steve/antidisestablishmentawesome]]
Note that commands will not actually run until you press ENTER.
